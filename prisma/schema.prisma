generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  name           String?   @unique
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())

  accounts Account[]
  comments Comment[]
  replys   Reply[]
  posts    Post[]
  likes    Post[]    @relation("UserLikes")
  favorits Post[]    @relation("UserFavorits")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String?
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  sesstion_state    String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Post {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String
  image       String?
  createdAt   DateTime @default(now())

  likes    User[]    @relation("UserLikes")
  favorits User[]    @relation("UserFavorits")
  comments Comment[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Comment {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  commentId String?
  text      String
  createdAt DateTime @default(now())

  replys Reply[]

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Reply {
  id        String   @id @default(cuid())
  commentId String
  userId    String
  text      String
  createdAt DateTime @default(now())

  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}
